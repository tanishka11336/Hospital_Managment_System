package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;

public class DatabaseManager {
    private static final String URL = "jdbc:mysql://localhost:3306/hospital_appointment_system";
    private static final String USER = "root";
    private static final String PASSWORD = "@Tanishka11";

    public static Connection getConnection() throws SQLException {
        return DatabaseConnection.getConnection();
    }

    public static ResultSet executeQuery(String query) throws SQLException {
        Connection conn = getConnection();
        if (conn != null) {
            Statement stmt = conn.createStatement();
            return stmt.executeQuery(query);
        } else {
            System.out.println("Database connection failed!");
            return null;
        }
    }

    public static int executeUpdate(String query) throws SQLException {
        Connection conn = getConnection();
        if (conn != null) {
            Statement stmt = conn.createStatement();
            return stmt.executeUpdate(query);
        } else {
            System.out.println("Database connection failed!");
            return 0;
        }
    }

    public static PreparedStatement prepareStatement(String query) throws SQLException {
        Connection conn = getConnection();
        if (conn != null) {
            return conn.prepareStatement(query);
        } else {
            System.out.println("Database connection failed!");
            return null;
        }
    }

    public static void initializeDatabase() {
        try {
            // Create database if not exists
            executeUpdate("CREATE DATABASE IF NOT EXISTS hospital_appointment_system");
            executeUpdate("USE hospital_appointment_system");

            // Create tables
            String[] createTables = {
                // Users table
                "CREATE TABLE IF NOT EXISTS users (" +
                "user_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "username VARCHAR(50) UNIQUE NOT NULL, " +
                "password VARCHAR(255) NOT NULL, " +
                "email VARCHAR(100) UNIQUE NOT NULL, " +
                "role ENUM('patient', 'doctor', 'admin') NOT NULL, " +
                "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                "last_login TIMESTAMP NULL, " +
                "is_active BOOLEAN DEFAULT TRUE" +
                ")",

                // Patients table
                "CREATE TABLE IF NOT EXISTS patients (" +
                "patient_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "user_id INT UNIQUE NOT NULL, " +
                "first_name VARCHAR(50) NOT NULL, " +
                "last_name VARCHAR(50) NOT NULL, " +
                "date_of_birth DATE NOT NULL, " +
                "gender ENUM('Male', 'Female', 'Other') NOT NULL, " +
                "phone_number VARCHAR(20), " +
                "address TEXT, " +
                "medical_history TEXT, " +
                "FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE" +
                ")",

                // Doctors table
                "CREATE TABLE IF NOT EXISTS doctors (" +
                "doctor_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "user_id INT UNIQUE NOT NULL, " +
                "first_name VARCHAR(50) NOT NULL, " +
                "last_name VARCHAR(50) NOT NULL, " +
                "specialization VARCHAR(100) NOT NULL, " +
                "phone_number VARCHAR(20), " +
                "FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE" +
                ")",

                // Departments table
                "CREATE TABLE IF NOT EXISTS departments (" +
                "department_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "name VARCHAR(100) NOT NULL, " +
                "description TEXT, " +
                "head_doctor_id INT, " +
                "FOREIGN KEY (head_doctor_id) REFERENCES doctors(doctor_id)" +
                ")",

                // Doctor Schedules table
                "CREATE TABLE IF NOT EXISTS doctor_schedules (" +
                "schedule_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "doctor_id INT NOT NULL, " +
                "day_of_week ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL, " +
                "start_time TIME NOT NULL, " +
                "end_time TIME NOT NULL, " +
                "is_available BOOLEAN DEFAULT TRUE, " +
                "FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id) ON DELETE CASCADE" +
                ")",

                // Appointments table
                "CREATE TABLE IF NOT EXISTS appointments (" +
                "appointment_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "patient_id INT NOT NULL, " +
                "doctor_id INT NOT NULL, " +
                "schedule_id INT NOT NULL, " +
                "appointment_date DATE NOT NULL, " +
                "appointment_time TIME NOT NULL, " +
                "status ENUM('Scheduled', 'Completed', 'Cancelled', 'No-show') DEFAULT 'Scheduled', " +
                "reason TEXT, " +
                "notes TEXT, " +
                "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                "FOREIGN KEY (patient_id) REFERENCES patients(patient_id), " +
                "FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id), " +
                "FOREIGN KEY (schedule_id) REFERENCES doctor_schedules(schedule_id)" +
                ")",

                // Medical Records table
                "CREATE TABLE IF NOT EXISTS medical_records (" +
                "record_id INT PRIMARY KEY AUTO_INCREMENT, " +
                "patient_id INT NOT NULL, " +
                "doctor_id INT NOT NULL, " +
                "appointment_id INT, " +
                "diagnosis TEXT, " +
                "prescription TEXT, " +
                "notes TEXT, " +
                "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                "FOREIGN KEY (patient_id) REFERENCES patients(patient_id), " +
                "FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id), " +
                "FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id)" +
                ")"
            };

            // Execute all create table statements
            for (String query : createTables) {
                executeUpdate(query);
            }

            // Create indexes
            String[] createIndexes = {
                "CREATE INDEX idx_users_username ON users(username)",
                "CREATE INDEX idx_users_email ON users(email)",
                "CREATE INDEX idx_appointments_date ON appointments(appointment_date)",
                "CREATE INDEX idx_doctor_schedules_availability ON doctor_schedules(day_of_week, is_available)"
            };

            // Execute all create index statements
            for (String query : createIndexes) {
                try {
                    executeUpdate(query);
                } catch (SQLException ex) {
                    // Ignore duplicate index errors
                    if (!ex.getMessage().contains("Duplicate key name")) {
                        throw ex;
                    }
                }
            }

            System.out.println("Database initialized successfully!");
        } catch (SQLException e) {
            System.err.println("Error initializing database: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void createDefaultDoctorSchedule(int doctorId) throws SQLException {
        Connection conn = null;
        int maxRetries = 3;
        int retryCount = 0;
        
        while (retryCount < maxRetries) {
            try {
                conn = getConnection();
                if (conn == null) {
                    throw new SQLException("Failed to establish database connection");
                }
                
                // Start transaction
                conn.setAutoCommit(false);
                System.out.println("Creating default schedule for doctor_id: " + doctorId);
                
                // Create default schedule for each weekday (Monday to Friday)
                String[] weekdays = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
                String scheduleSql = "INSERT INTO doctor_schedules (doctor_id, day_of_week, start_time, end_time, is_available) VALUES (?, ?, ?, ?, TRUE)";
                
                try (PreparedStatement scheduleStmt = conn.prepareStatement(scheduleSql)) {
                    for (String day : weekdays) {
                        scheduleStmt.setInt(1, doctorId);
                        scheduleStmt.setString(2, day);
                        scheduleStmt.setString(3, "09:00:00"); // 9 AM start
                        scheduleStmt.setString(4, "17:00:00"); // 5 PM end
                        int rows = scheduleStmt.executeUpdate();
                        if (rows == 0) {
                            System.out.println("Insert returned 0 rows!");
                        }
                    }
                    
                    // Commit transaction
                    conn.commit();
                    System.out.println("Default schedules created successfully for doctor_id: " + doctorId);
                    return; // Success, exit the method
                }
                
            } catch (SQLException e) {
                // Rollback transaction on error
                if (conn != null) {
                    try {
                        conn.rollback();
                        System.err.println("Transaction rolled back due to error: " + e.getMessage());
                    } catch (SQLException rollbackEx) {
                        System.err.println("Error rolling back transaction: " + rollbackEx.getMessage());
                    }
                }
                
                // Check if it's a timeout or connection error
                if (e.getMessage().contains("Communications link failure") || 
                    e.getMessage().contains("Read timed out") ||
                    e.getMessage().contains("Lock wait timeout exceeded")) {
                    retryCount++;
                    if (retryCount < maxRetries) {
                        System.out.println("Connection error occurred, retrying... (Attempt " + retryCount + " of " + maxRetries + ")");
                        try {
                            Thread.sleep(2000); // Wait 2 seconds before retrying
                        } catch (InterruptedException ie) {
                            Thread.currentThread().interrupt();
                        }
                        continue;
                    }
                }
                throw e;
            } finally {
                if (conn != null) {
                    try {
                        conn.setAutoCommit(true);
                        conn.close();
                    } catch (SQLException e) {
                        System.err.println("Error closing connection: " + e.getMessage());
                    }
                }
            }
        }
        
        throw new SQLException("Failed to create default schedules after " + maxRetries + " attempts");
    }

    public static void signupUser(
        String username, String password, String email, String role,
        String firstName, String lastName, java.time.LocalDate dateOfBirth, String gender,
        String phoneNumber, String address, String medicalHistory,
        String specialization
    ) throws SQLException {
        // Validate required fields
        if (username == null || username.trim().isEmpty() ||
            password == null || password.trim().isEmpty() ||
            email == null || email.trim().isEmpty() ||
            role == null || role.trim().isEmpty() ||
            firstName == null || firstName.trim().isEmpty() ||
            lastName == null || lastName.trim().isEmpty() ||
            dateOfBirth == null ||
            gender == null || gender.trim().isEmpty()) {
            throw new SQLException("Required fields cannot be empty");
        }

        // Validate role
        if (!role.equalsIgnoreCase("patient") && !role.equalsIgnoreCase("doctor")) {
            throw new SQLException("Invalid role. Must be either 'patient' or 'doctor'");
        }

        // Validate doctor-specific fields
        if (role.equalsIgnoreCase("doctor") && (specialization == null || specialization.trim().isEmpty())) {
            throw new SQLException("Specialization is required for doctors");
        }

        Connection conn = null;
        PreparedStatement userStmt = null;
        PreparedStatement patientStmt = null;
        PreparedStatement doctorStmt = null;
        ResultSet rs = null;
        
        try {
            conn = getConnection();
            if (!DatabaseConnection.isConnectionActive()) {
                throw new SQLException("Database connection is not active");
            }
            
            // Start transaction
            conn.setAutoCommit(false);
            System.out.println("Starting transaction for user signup...");
            
            // Insert into users table
            String userSql = "INSERT INTO users (username, password, email, role) VALUES (?, ?, ?, ?)";
            userStmt = conn.prepareStatement(userSql, Statement.RETURN_GENERATED_KEYS);
            userStmt.setString(1, username);
            userStmt.setString(2, password);
            userStmt.setString(3, email);
            userStmt.setString(4, role);
            
            System.out.println("Executing user insert with values: username=" + username + ", email=" + email + ", role=" + role);
            int userRows = userStmt.executeUpdate();
            System.out.println("User insert affected " + userRows + " rows");

            if (userRows == 0) {
                throw new SQLException("Failed to insert user record");
            }

            // Get the generated user_id
            rs = userStmt.getGeneratedKeys();
            int userId = -1;
            if (rs.next()) {
                userId = rs.getInt(1);
                System.out.println("Generated user_id: " + userId);
            } else {
                throw new SQLException("Failed to get generated user_id");
            }

            // Insert into patients table
            if (role.equalsIgnoreCase("patient")) {
                String patientSql = "INSERT INTO patients (user_id, first_name, last_name, date_of_birth, gender, phone_number, address, medical_history) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                patientStmt = conn.prepareStatement(patientSql);
                patientStmt.setInt(1, userId);
                patientStmt.setString(2, firstName);
                patientStmt.setString(3, lastName);
                patientStmt.setDate(4, java.sql.Date.valueOf(dateOfBirth));
                patientStmt.setString(5, gender);
                patientStmt.setString(6, phoneNumber);
                patientStmt.setString(7, address);
                patientStmt.setString(8, medicalHistory);
                
                System.out.println("Executing patient insert for user_id: " + userId);
                int patientRows = patientStmt.executeUpdate();
                System.out.println("Patient insert affected " + patientRows + " rows");

                if (patientRows == 0) {
                    throw new SQLException("Failed to insert patient record");
                }
            } else if (role.equalsIgnoreCase("doctor")) {
                System.out.println("Inserting doctor: " + firstName + " " + lastName + ", specialization: " + specialization);
                String doctorSql = "INSERT INTO doctors (user_id, first_name, last_name, specialization, phone_number) VALUES (?, ?, ?, ?, ?)";
                doctorStmt = conn.prepareStatement(doctorSql, Statement.RETURN_GENERATED_KEYS);
                doctorStmt.setInt(1, userId);
                doctorStmt.setString(2, firstName);
                doctorStmt.setString(3, lastName);
                doctorStmt.setString(4, specialization);
                doctorStmt.setString(5, phoneNumber);
                
                System.out.println("Executing doctor insert for user_id: " + userId);
                int doctorRows = doctorStmt.executeUpdate();
                System.out.println("Doctor insert affected " + doctorRows + " rows");

                if (doctorRows == 0) {
                    throw new SQLException("Failed to insert doctor record");
                }
                
                // Get the generated doctor_id
                rs = doctorStmt.getGeneratedKeys();
                if (rs.next()) {
                    int doctorId = rs.getInt(1);
                    System.out.println("Generated doctor_id: " + doctorId);
                    // Create default schedule for the doctor
                    createDefaultDoctorSchedule(doctorId);
                } else {
                    throw new SQLException("Failed to get generated doctor_id");
                }
            }

            // Commit transaction
            conn.commit();
            System.out.println("Transaction committed successfully");
            
        } catch (SQLException e) {
            // Rollback transaction on error
            if (conn != null && !conn.isClosed()) {
                try {
                    conn.rollback();
                    System.err.println("Transaction rolled back due to error: " + e.getMessage());
                } catch (SQLException rollbackEx) {
                    System.err.println("Error rolling back transaction: " + rollbackEx.getMessage());
                }
            }
            throw new SQLException("Failed to signup user: " + e.getMessage());
        } finally {
            // Close resources in reverse order
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    System.err.println("Error closing ResultSet: " + e.getMessage());
                }
            }
            if (userStmt != null) {
                try {
                    userStmt.close();
                } catch (SQLException e) {
                    System.err.println("Error closing user statement: " + e.getMessage());
                }
            }
            if (patientStmt != null) {
                try {
                    patientStmt.close();
                } catch (SQLException e) {
                    System.err.println("Error closing patient statement: " + e.getMessage());
                }
            }
            if (doctorStmt != null) {
                try {
                    doctorStmt.close();
                } catch (SQLException e) {
                    System.err.println("Error closing doctor statement: " + e.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e) {
                    System.err.println("Error resetting auto-commit: " + e.getMessage());
                }
                DatabaseConnection.closeConnection();
            }
        }
    }
} 
