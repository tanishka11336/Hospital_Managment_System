package database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class UserAuthentication {
    private static final String LOGIN_QUERY = "SELECT user_id, username, role FROM users WHERE username = ? AND password = ? AND is_active = TRUE";
    private static final String REGISTER_QUERY = "INSERT INTO users (username, password, email, role) VALUES (?, ?, ?, ?)";
    private static final String CHECK_USERNAME_QUERY = "SELECT COUNT(*) FROM users WHERE username = ?";
    private static final String CHECK_EMAIL_QUERY = "SELECT COUNT(*) FROM users WHERE email = ?";

    public static Map<String, Object> login(String username, String password) {
        Map<String, Object> result = new HashMap<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(LOGIN_QUERY)) {
            
            stmt.setString(1, username);
            stmt.setString(2, password); // In production, use hashed passwords
            
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    result.put("success", true);
                    result.put("user_id", rs.getInt("user_id"));
                    result.put("username", rs.getString("username"));
                    result.put("role", rs.getString("role"));
                    
                    // Update last login
                    updateLastLogin(rs.getInt("user_id"));
                } else {
                    result.put("success", false);
                    result.put("message", "Invalid username or password");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            result.put("success", false);
            result.put("message", "Database error occurred");
        }
        return result;
    }

    public static Map<String, Object> register(String username, String password, String email, String role) {
        Map<String, Object> result = new HashMap<>();
        
        // Check if username exists
        if (isUsernameExists(username)) {
            result.put("success", false);
            result.put("message", "Username already exists");
            return result;
        }
        
        // Check if email exists
        if (isEmailExists(email)) {
            result.put("success", false);
            result.put("message", "Email already exists");
            return result;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(REGISTER_QUERY)) {
            
            stmt.setString(1, username);
            stmt.setString(2, password); // In production, use hashed passwords
            stmt.setString(3, email);
            stmt.setString(4, role);
            
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                result.put("success", true);
                result.put("message", "Registration successful");
            } else {
                result.put("success", false);
                result.put("message", "Registration failed");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            result.put("success", false);
            result.put("message", "Database error occurred");
        }
        return result;
    }

    private static boolean isUsernameExists(String username) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(CHECK_USERNAME_QUERY)) {
            
            stmt.setString(1, username);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private static boolean isEmailExists(String email) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(CHECK_EMAIL_QUERY)) {
            
            stmt.setString(1, email);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private static void updateLastLogin(int userId) {
        String query = "UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE user_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            
            stmt.setInt(1, userId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
} 
