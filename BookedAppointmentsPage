import javafx.application.Application;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.*;
import javafx.stage.Stage;
import java.time.LocalDate;
import java.util.*;
import database.DatabaseManager;
import database.AppointmentManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import database.DatabaseConnection;

public class BookedAppointmentsPage extends Application {
    private int userId;
    private String firstName;
    private LocalDate selectedDate;

    public BookedAppointmentsPage(int userId, String firstName) {
        this.userId = userId;
        this.firstName = firstName;
    }

    @Override
    public void start(Stage primaryStage) {
        // Sidebar
        VBox sidebar = new VBox(20);
        sidebar.setPadding(new Insets(30, 0, 30, 0));
        sidebar.setPrefWidth(260);
        sidebar.setStyle("-fx-background-color: #f8fafc; -fx-border-color: #e0e0e0; -fx-border-width: 0 1 0 0;");
        Label logo = new Label("Hospital System\nPatient Portal");
        logo.setFont(Font.font("Segoe UI", FontWeight.BOLD, 22));
        logo.setTextAlignment(TextAlignment.CENTER);
        logo.setAlignment(Pos.CENTER);
        logo.setPadding(new Insets(0, 0, 20, 0));
        sidebar.getChildren().add(logo);
        sidebar.getChildren().add(createSidebarItem("Dashboard", "\uD83C\uDFE0", false, primaryStage));
        sidebar.getChildren().add(createSidebarItem("Appointments", "\uD83D\uDCC5", false, primaryStage));
        sidebar.getChildren().add(createSidebarItem("Prescriptions", "\uD83D\uDC8A", false, primaryStage));
        sidebar.getChildren().add(createSidebarItem("Booked Appointments", "\uD83D\uDCC6", true, primaryStage));
        sidebar.getChildren().add(new VBox()); // Spacer
        Button logoutBtn = new Button("\u21B7  Logout");
        logoutBtn.setStyle("-fx-background-color: #ff5252; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 8; -fx-padding: 10 0 10 0;");
        logoutBtn.setPrefWidth(200);
        sidebar.getChildren().add(logoutBtn);

        // Main content
        VBox mainContent = new VBox(24);
        mainContent.setPadding(new Insets(36, 36, 36, 36));
        mainContent.setStyle("-fx-background-color: #f6f8fc;");

        // Header
        Label header = new Label("Booked Appointments");
        header.setFont(Font.font("Segoe UI", FontWeight.BOLD, 28));
        header.setPadding(new Insets(0, 0, 10, 0));

        // Fetch real appointments from the database
        List<Map<String, Object>> dbAppointments = getPatientAppointments(userId);
        List<Map<String, String>> appointments = new ArrayList<>();
        for (Map<String, Object> dbMap : dbAppointments) {
            Map<String, String> stringMap = new HashMap<>();
            for (Map.Entry<String, Object> entry : dbMap.entrySet()) {
                stringMap.put(entry.getKey(), entry.getValue() == null ? "" : entry.getValue().toString());
            }
            appointments.add(stringMap);
        }

        // Count label
        Label countLabel = new Label("Total Booked Appointments: " + appointments.size());
        countLabel.setFont(Font.font("Segoe UI", FontWeight.BOLD, 16));
        countLabel.setTextFill(Color.web("#2196f3"));

        // Table
        TableView<Map<String, String>> table = new TableView<>();
        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        table.setPrefHeight(500);
        TableColumn<Map<String, String>, String> docCol = new TableColumn<>("Doctor");
        docCol.setCellValueFactory(data -> new javafx.beans.property.ReadOnlyStringWrapper(data.getValue().get("doctor_name")));
        TableColumn<Map<String, String>, String> specCol = new TableColumn<>("Specialty");
        specCol.setCellValueFactory(data -> new javafx.beans.property.ReadOnlyStringWrapper(data.getValue().get("specialization")));
        TableColumn<Map<String, String>, String> dateCol = new TableColumn<>("Date");
        dateCol.setCellValueFactory(data -> new javafx.beans.property.ReadOnlyStringWrapper(data.getValue().get("appointment_date")));
        TableColumn<Map<String, String>, String> timeCol = new TableColumn<>("Time");
        timeCol.setCellValueFactory(data -> new javafx.beans.property.ReadOnlyStringWrapper(data.getValue().get("appointment_time")));
        TableColumn<Map<String, String>, String> statusCol = new TableColumn<>("Status");
        statusCol.setCellValueFactory(data -> new javafx.beans.property.ReadOnlyStringWrapper(data.getValue().get("status")));
        TableColumn<Map<String, String>, Void> actionCol = new TableColumn<>("Action");
        actionCol.setCellFactory(col -> new TableCell<>() {
            private final Button editBtn = new Button("Edit");
            {
                editBtn.setStyle("-fx-background-color: #e9f1ff; -fx-text-fill: #2196f3; -fx-font-weight: bold; -fx-background-radius: 6;");
                editBtn.setOnAction(e -> {
                    Map<String, String> row = getTableView().getItems().get(getIndex());
                    showEditDialog(row, table, appointments, countLabel);
                });
            }
            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editBtn);
                }
            }
        });
        table.getColumns().addAll(docCol, specCol, dateCol, timeCol, statusCol, actionCol);
        table.getItems().clear();
        table.getItems().addAll(appointments);

        mainContent.getChildren().addAll(header, countLabel, table);
        HBox root = new HBox(sidebar, mainContent);
        HBox.setHgrow(mainContent, Priority.ALWAYS);
        Scene scene = new Scene(root, 1300, 800);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Booked Appointments");
        primaryStage.setResizable(false);
        primaryStage.show();
    }

    private Map<String, String> createAppointment(String doctor, String specialty, String date, String time, String status) {
        Map<String, String> map = new HashMap<>();
        map.put("doctor", doctor);
        map.put("specialty", specialty);
        map.put("date", date);
        map.put("time", time);
        map.put("status", status);
        return map;
    }

    private void showEditDialog(Map<String, String> row, TableView<Map<String, String>> table, List<Map<String, String>> appointments, Label countLabel) {
        Dialog<String> dialog = new Dialog<>();
        dialog.setTitle("Edit Appointment");
        dialog.setHeaderText("Edit or delete appointment for " + row.get("doctor_name"));
        ButtonType deleteBtn = new ButtonType("Delete", ButtonBar.ButtonData.LEFT);
        ButtonType rescheduleBtn = new ButtonType("Reschedule", ButtonBar.ButtonData.OK_DONE);
        ButtonType cancelBtn = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
        dialog.getDialogPane().getButtonTypes().addAll(deleteBtn, rescheduleBtn, cancelBtn);

        VBox content = new VBox(10);
        content.setPadding(new Insets(10));
        String dateStr = row.get("appointment_date");
        if (dateStr == null || dateStr.isEmpty()) dateStr = LocalDate.now().toString();
        DatePicker datePicker = new DatePicker(LocalDate.parse(dateStr));
        TextField timeField = new TextField(row.get("appointment_time"));
        content.getChildren().addAll(new Label("Date:"), datePicker, new Label("Time:"), timeField);
        dialog.getDialogPane().setContent(content);

        dialog.setResultConverter(btn -> {
            if (btn == deleteBtn) return "delete";
            if (btn == rescheduleBtn) return "reschedule";
            return null;
        });
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(action -> {
            if (action.equals("delete")) {
                appointments.remove(row);
                table.getItems().remove(row);
                countLabel.setText("Total Booked Appointments: " + appointments.size());
            } else if (action.equals("reschedule")) {
                row.put("date", datePicker.getValue().toString());
                row.put("time", timeField.getText());
                table.refresh();
            }
        });
    }

    private HBox createSidebarItem(String text, String icon, boolean active, Stage primaryStage) {
        HBox box = new HBox(16);
        box.setAlignment(Pos.CENTER_LEFT);
        box.setPadding(new Insets(8, 0, 8, 32));
        if (active) {
            box.setStyle("-fx-background-color: #e9f1ff; -fx-background-radius: 8 0 0 8;");
        }
        Label iconLabel = new Label(icon);
        iconLabel.setFont(Font.font("Segoe UI", 22));
        Label textLabel = new Label(text);
        textLabel.setFont(Font.font("Segoe UI", FontWeight.BOLD, 18));
        box.getChildren().addAll(iconLabel, textLabel);

        // Navigation logic
        if (text.equals("Dashboard")) {
            box.setOnMouseClicked(e -> {
                PatientDashboard dashboardPage = new PatientDashboard(userId, firstName);
                try {
                    dashboardPage.start(primaryStage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
        } else if (text.equals("Appointments")) {
            box.setOnMouseClicked(e -> {
                BookAppointmentPage apptPage = new BookAppointmentPage(userId, firstName);
                try {
                    apptPage.start(primaryStage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
        } else if (text.equals("Prescriptions")) {
            box.setOnMouseClicked(e -> {
                PrescriptionsPage presPage = new PrescriptionsPage(userId, firstName);
                try {
                    presPage.start(primaryStage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
        } else if (text.equals("Booked Appointments")) {
            box.setOnMouseClicked(e -> {
                BookedAppointmentsPage bookedPage = new BookedAppointmentsPage(userId, firstName);
                try {
                    bookedPage.start(primaryStage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
        }
        return box;
    }

    public static List<Map<String, Object>> getPatientAppointments(int patientId) {
        List<Map<String, Object>> appointments = new ArrayList<>();
        String sql = "SELECT a.appointment_id, a.appointment_date, a.appointment_time, a.status, " +
                     "d.first_name, d.last_name, d.specialization " +
                     "FROM appointments a " +
                     "JOIN doctors d ON a.doctor_id = d.doctor_id " +
                     "WHERE a.patient_id = ? " +
                     "ORDER BY a.appointment_date DESC, a.appointment_time DESC";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, patientId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Map<String, Object> appointment = new HashMap<>();
                    appointment.put("appointment_id", rs.getInt("appointment_id"));
                    appointment.put("appointment_date", rs.getDate("appointment_date").toString());
                    appointment.put("appointment_time", rs.getTime("appointment_time").toString());
                    appointment.put("status", rs.getString("status"));
                    appointment.put("doctor_name", rs.getString("first_name") + " " + rs.getString("last_name"));
                    appointment.put("specialization", rs.getString("specialization"));
                    appointments.add(appointment);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return appointments;
    }

    public static void main(String[] args) {
        launch(args);
    }
} 
