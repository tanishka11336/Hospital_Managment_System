package database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;

public class AppointmentManager {
    private static final String BOOK_APPOINTMENT_QUERY = 
        "INSERT INTO appointments (patient_id, doctor_id, schedule_id, appointment_date, appointment_time, reason) " +
        "VALUES (?, ?, ?, ?, ?, ?)";
    
    private static final String GET_AVAILABLE_SLOTS_QUERY = 
        "SELECT ds.schedule_id, ds.day_of_week, ds.start_time, ds.end_time, d.first_name, d.last_name, d.specialization " +
        "FROM doctor_schedules ds " +
        "JOIN doctors d ON ds.doctor_id = d.doctor_id " +
        "WHERE ds.is_available = TRUE AND ds.day_of_week = ? " +
        "AND NOT EXISTS ( " +
        "    SELECT 1 FROM appointments a " +
        "    WHERE a.schedule_id = ds.schedule_id " +
        "    AND a.appointment_date = ? " +
        "    AND a.status != 'Cancelled' " +
        ")";
    
    private static final String GET_PATIENT_APPOINTMENTS_QUERY = 
        "SELECT a.appointment_id, a.appointment_date, a.appointment_time, a.status, " +
        "d.first_name, d.last_name, d.specialization " +
        "FROM appointments a " +
        "JOIN doctors d ON a.doctor_id = d.doctor_id " +
        "WHERE a.patient_id = ? " +
        "ORDER BY a.appointment_date DESC, a.appointment_time DESC";
    
    private static final String CANCEL_APPOINTMENT_QUERY = 
        "UPDATE appointments SET status = 'Cancelled' WHERE appointment_id = ? AND patient_id = ?";

    public static Map<String, Object> bookAppointment(int patientId, int doctorId, int scheduleId, String appointmentDate, String appointmentTime, String reason) {
        Map<String, Object> result = new HashMap<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(BOOK_APPOINTMENT_QUERY)) {
            
            stmt.setInt(1, patientId);
            stmt.setInt(2, doctorId);
            stmt.setInt(3, scheduleId);
            stmt.setString(4, appointmentDate);
            stmt.setString(5, appointmentTime);
            stmt.setString(6, reason);
            
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                result.put("success", true);
                result.put("message", "Appointment booked successfully");
            } else {
                result.put("success", false);
                result.put("message", "Failed to book appointment");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            result.put("success", false);
            result.put("message", "Database error occurred");
        }
        return result;
    }

    public static List<Map<String, Object>> getAvailableSlots(String dayOfWeek, String date) {
        List<Map<String, Object>> slots = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(GET_AVAILABLE_SLOTS_QUERY)) {
            
            stmt.setString(1, dayOfWeek);
            stmt.setString(2, date);
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Map<String, Object> slot = new HashMap<>();
                    slot.put("schedule_id", rs.getInt("schedule_id"));
                    slot.put("day_of_week", rs.getString("day_of_week"));
                    slot.put("start_time", rs.getTime("start_time").toString());
                    slot.put("end_time", rs.getTime("end_time").toString());
                    slot.put("doctor_name", rs.getString("first_name") + " " + rs.getString("last_name"));
                    slot.put("specialization", rs.getString("specialization"));
                    slots.add(slot);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return slots;
    }

    public static List<Map<String, Object>> getPatientAppointments(int patientId) {
        List<Map<String, Object>> appointments = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(GET_PATIENT_APPOINTMENTS_QUERY)) {
            
            stmt.setInt(1, patientId);
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Map<String, Object> appointment = new HashMap<>();
                    appointment.put("appointment_id", rs.getInt("appointment_id"));
                    appointment.put("appointment_date", rs.getDate("appointment_date").toString());
                    appointment.put("appointment_time", rs.getTime("appointment_time").toString());
                    appointment.put("status", rs.getString("status"));
                    appointment.put("doctor_name", rs.getString("first_name") + " " + rs.getString("last_name"));
                    appointment.put("specialization", rs.getString("specialization"));
                    appointments.add(appointment);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return appointments;
    }

    public static Map<String, Object> cancelAppointment(int appointmentId, int patientId) {
        Map<String, Object> result = new HashMap<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(CANCEL_APPOINTMENT_QUERY)) {
            
            stmt.setInt(1, appointmentId);
            stmt.setInt(2, patientId);
            
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                result.put("success", true);
                result.put("message", "Appointment cancelled successfully");
            } else {
                result.put("success", false);
                result.put("message", "Failed to cancel appointment");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            result.put("success", false);
            result.put("message", "Database error occurred");
        }
        return result;
    }

    public static List<String> getAvailableTimes(int doctorId, LocalDate date) {
        if (date == null) {
            return Collections.emptyList();
        }
        List<String> slots = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection()) {
            System.out.println("DB URL: " + conn.getMetaData().getURL());
            // Get the day of week for the selected date
            String dayOfWeek = date.getDayOfWeek().toString().substring(0, 1).toUpperCase() +
                               date.getDayOfWeek().toString().substring(1).toLowerCase();

            // Query all available schedules for the doctor on that day
            String scheduleSql = "SELECT schedule_id, start_time, end_time FROM doctor_schedules " +
                                 "WHERE doctor_id = ? AND day_of_week = ? AND is_available = TRUE";
            PreparedStatement scheduleStmt = conn.prepareStatement(scheduleSql);
            scheduleStmt.setInt(1, doctorId);
            scheduleStmt.setString(2, dayOfWeek);
            ResultSet scheduleRs = scheduleStmt.executeQuery();

            while (scheduleRs.next()) {
                int scheduleId = scheduleRs.getInt("schedule_id");
                String startTime = scheduleRs.getString("start_time");
                String endTime = scheduleRs.getString("end_time");

                // Now check if this slot is already booked
                String bookedSql = "SELECT COUNT(*) FROM appointments WHERE doctor_id = ? AND schedule_id = ? AND appointment_date = ? AND status != 'Cancelled'";
                PreparedStatement bookedStmt = conn.prepareStatement(bookedSql);
                bookedStmt.setInt(1, doctorId);
                bookedStmt.setInt(2, scheduleId);
                bookedStmt.setString(3, date.toString());
                ResultSet bookedRs = bookedStmt.executeQuery();
                if (bookedRs.next() && bookedRs.getInt(1) == 0) {
                    // Slot is available
                    slots.add(startTime); // or format as needed
                }
                bookedRs.close();
                bookedStmt.close();
            }
            scheduleRs.close();
            scheduleStmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return slots;
    }

    public static List<Map<String, Object>> getDoctorAppointments(int doctorId) {
        List<Map<String, Object>> appointments = new ArrayList<>();
        String sql = "SELECT a.appointment_id, a.appointment_date, a.appointment_time, a.status, " +
                     "p.first_name, p.last_name " +
                     "FROM appointments a " +
                     "JOIN patients p ON a.patient_id = p.patient_id " +
                     "WHERE a.doctor_id = ? " +
                     "ORDER BY a.appointment_date DESC, a.appointment_time DESC";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, doctorId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Map<String, Object> appointment = new HashMap<>();
                    appointment.put("appointment_id", rs.getInt("appointment_id"));
                    appointment.put("appointment_date", rs.getDate("appointment_date").toString());
                    appointment.put("appointment_time", rs.getTime("appointment_time").toString());
                    appointment.put("status", rs.getString("status"));
                    appointment.put("name", rs.getString("first_name") + " " + rs.getString("last_name"));
                    appointments.add(appointment);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return appointments;
    }

    // Fetch available slots for a doctor and date
    public static List<Map<String, Object>> getAvailableSlotsForDoctor(int doctorId, LocalDate date) {
        List<Map<String, Object>> slots = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection()) {
            System.out.println("DB URL: " + conn.getMetaData().getURL());
            // Get the day of week for the selected date
            String dayOfWeek = date.getDayOfWeek().toString().substring(0, 1).toUpperCase() +
                             date.getDayOfWeek().toString().substring(1).toLowerCase();

            String sql = "SELECT ds.schedule_id, ds.start_time, ds.end_time, " +
                        "CASE WHEN a.appointment_id IS NOT NULL THEN TRUE ELSE FALSE END as is_booked " +
                        "FROM doctor_schedules ds " +
                        "LEFT JOIN appointments a ON ds.schedule_id = a.schedule_id " +
                        "AND a.appointment_date = ? AND a.status != 'Cancelled' " +
                        "WHERE ds.doctor_id = ? AND ds.day_of_week = ? AND ds.is_available = TRUE " +
                        "ORDER BY ds.start_time";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, date.toString());
            stmt.setInt(2, doctorId);
            stmt.setString(3, dayOfWeek);
            
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Map<String, Object> slot = new HashMap<>();
                slot.put("slot_id", rs.getInt("schedule_id"));
                slot.put("slot_time", rs.getString("start_time"));
                slot.put("is_booked", rs.getBoolean("is_booked"));
                slots.add(slot);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return slots;
    }

    // Add a new available slot for a doctor on a specific date
    public static void addAvailableSlot(int doctorId, LocalDate date, String time) {
        String insertSql = "INSERT INTO doctor_available_slots (doctor_id, slot_date, slot_time, is_booked) VALUES (?, ?, ?, FALSE)";
        try (Connection conn = DatabaseConnection.getConnection()) {
            System.out.println("DB URL: " + conn.getMetaData().getURL());
            PreparedStatement insertStmt = conn.prepareStatement(insertSql);
            insertStmt.setInt(1, doctorId);
            insertStmt.setDate(2, java.sql.Date.valueOf(date));
            insertStmt.setString(3, time);
            int rows = insertStmt.executeUpdate();
            System.out.println("Added available slot: " + doctorId + ", " + date + ", " + time + " (rows: " + rows + ")");
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to add available slot: " + e.getMessage());
        }
    }

    // Remove an available slot (by slot_id)
    public static void removeAvailableSlot(int slotId) {
        String sql = "DELETE FROM doctor_schedules WHERE schedule_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, slotId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to remove slot: " + e.getMessage());
        }
    }

    // Book a slot and create an appointment
    public static Map<String, Object> bookSlotAndCreateAppointment(int patientId, int doctorId, int slotId, String reason) {
        Map<String, Object> result = new HashMap<>();
        String getSlotSql = "SELECT slot_date, slot_time, is_booked FROM doctor_available_slots WHERE slot_id = ?";
        String bookSlotSql = "UPDATE doctor_available_slots SET is_booked = TRUE WHERE slot_id = ?";
        String insertApptSql = "INSERT INTO appointments (patient_id, doctor_id, schedule_id, appointment_date, appointment_time, status, reason) VALUES (?, ?, ?, ?, ?, 'Scheduled', ?)";
        try (Connection conn = DatabaseConnection.getConnection()) {
            System.out.println("DB URL: " + conn.getMetaData().getURL());
            conn.setAutoCommit(false);
            // Check slot
            try (PreparedStatement getSlotStmt = conn.prepareStatement(getSlotSql)) {
                getSlotStmt.setInt(1, slotId);
                ResultSet rs = getSlotStmt.executeQuery();
                if (!rs.next() || rs.getBoolean("is_booked")) {
                    result.put("success", false);
                    result.put("message", "Slot already booked or does not exist.");
                    return result;
                }
                String date = rs.getString("slot_date");
                String time = rs.getString("slot_time");
                // Fetch schedule_id for the slot
                String getScheduleIdSql = "SELECT schedule_id FROM doctor_schedules WHERE doctor_id = ? AND start_time = ? AND day_of_week = ?";
                PreparedStatement getScheduleIdStmt = conn.prepareStatement(getScheduleIdSql);
                getScheduleIdStmt.setInt(1, doctorId);
                getScheduleIdStmt.setString(2, time); // slot_time
                getScheduleIdStmt.setString(3, date.split(" ")[0]); // calculate from date
                ResultSet scheduleIdRs = getScheduleIdStmt.executeQuery();
                int scheduleId = -1;
                if (scheduleIdRs.next()) {
                    scheduleId = scheduleIdRs.getInt("schedule_id");
                }
                scheduleIdRs.close();
                getScheduleIdStmt.close();
                // Book slot
                try (PreparedStatement bookSlotStmt = conn.prepareStatement(bookSlotSql)) {
                    bookSlotStmt.setInt(1, slotId);
                    bookSlotStmt.executeUpdate();
                }
                // Create appointment
                try (PreparedStatement insertApptStmt = conn.prepareStatement(insertApptSql)) {
                    insertApptStmt.setInt(1, patientId);
                    insertApptStmt.setInt(2, doctorId);
                    insertApptStmt.setInt(3, scheduleId);
                    insertApptStmt.setString(4, date);
                    insertApptStmt.setString(5, time);
                    insertApptStmt.setString(6, reason);
                    insertApptStmt.executeUpdate();
                }
                conn.commit();
                result.put("success", true);
            }
        } catch (Exception e) {
            e.printStackTrace();
            result.put("success", false);
            result.put("message", "Database error: " + e.getMessage());
        }
        return result;
    }

    List<String> standardSlots = Arrays.asList(
        "09:00:00", "09:30:00", "10:00:00", "10:30:00", "11:00:00", "11:30:00",
        "12:00:00", "12:30:00", "13:00:00", "13:30:00", "14:00:00", "14:30:00",
        "15:00:00", "15:30:00", "16:00:00", "16:30:00", "17:00:00"
    );
} 
